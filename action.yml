name: ECR & Cloud-formation deployment

inputs:
  # Required inputs
  ENVIRONMENT:
    type: string
    description: "Name of the environment to deploy"
    required: true
  AWS_CF_STACK_NAME:
    type: string
    description: "AWS cloud-formation stack name"
    required: true
  AWS_ECR_REPOSITORY:
    type: string
    description: "AWS ECR Repository name"
    required: true
  AWS_ACCESS_KEY_ID:
    type: string
    description: "AWS Access key id"
    required: true
  AWS_SECRET_ACCESS_KEY:
    type: string
    description: "AWS Secret access key"
    required: true
  AWS_REGION:
    type: string
    description: "AWS Region"
    required: true

  AWS_BUCKET_CLOUDFORMATION:
    type: string
    description: "Bucket name to store cloudformation.yml files"
    required: false

  # Backups
  AWS_ACCESS_KEY_ID_BACKUP:
    type: string
    description: "Backup access key id"
    required: false
  AWS_SECRET_ACCESS_KEY_BACKUP:
    type: string
    description: "Backup secret access key"
    required: false
  AWS_REGION_BACKUP:
    type: string
    description: "Backup region"
    required: false
  AWS_BUCKET_BACKUP_STEPLIX:
    type: string
    description: "Backup bucket name"
    required: false
  STEPLIX_BACKUP_PATH:
    type: string
    description: "Backup path"
    required: false

  # NOT required inputs
  CAPABILITIES:
    description: "The comma-delimited list of stack template capabilities to acknowledge. Defaults to 'CAPABILITY_IAM'"
    required: false
    default: "CAPABILITY_IAM"
  AWS_CLOUDFORMATION_PARAMS_OVERRIDE:
    type: string
    description: "Cloudformation parameters to override when deploy the application"
    required: false
  TAG:
    type: string
    description: Tag that will be placed on the docker image to upload in ECR. The default value is the Short commit SHA.
    required: false
  DISABLE_CACHE:
    type: boolean
    default: false
    description: Disable docker cache
    required: false
  CONCAT_ENV_CF_STACK_NAME:
    type: boolean
    default: true
    description: Concatenate the environment in the cloudformation stack name at the end
    required: false
  REPLACE_VERSION_IN_PACKAGE_JSON:
    type: boolean
    default: true
    description: If is true replace version in package json with the tag sended or the Short commit SHA.
    required: false

runs:
  using: composite
  steps:
    - uses: actions/checkout@v3

    - name: Get Short commit SHA if don't send a TAG
      shell: bash
      run: |
        if [ '${{ inputs.TAG }}' == '' ]; then
          echo "TAG=$(git rev-parse --short HEAD)" >> $GITHUB_ENV;
        else
          echo "TAG=${{ inputs.TAG }}" >> $GITHUB_ENV;
        fi

    - uses: aws-actions/configure-aws-credentials@v1-node16
      id: AWS
      with:
        aws-access-key-id: ${{ inputs.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ inputs.AWS_REGION }}

    - name: Form ECR Docker URL
      shell: bash
      run: echo ECR_URL=${{ steps.AWS.outputs.aws-account-id }}.dkr.ecr.${{ inputs.AWS_REGION }}.amazonaws.com/${{ inputs.AWS_ECR_REPOSITORY }} >> $GITHUB_ENV

    - name: Log-in to ECR
      shell: bash
      run: aws ecr get-login-password --region "${{ inputs.AWS_REGION }}" | docker login --username AWS --password-stdin ${{ env.ECR_URL }}

    - name: Verify if Docker already exist with tag ${{ env.TAG }}
      shell: bash
      run: |
        IMAGE=$(aws ecr list-images --region ${{ inputs.AWS_REGION }} --repository-name ${{ inputs.AWS_ECR_REPOSITORY }} --query "imageIds[?imageTag=='${{ env.TAG }}'].imageDigest" --output text)
        echo EXITS_IMAGE=$(if [[ ! -z "${IMAGE}" ]]; then echo true; else echo false; fi) >> $GITHUB_ENV

    - name: Modify package.json based on bumped tag
      if: env.EXITS_IMAGE != 'true' && inputs.REPLACE_VERSION_IN_PACKAGE_JSON == 'true'
      shell: bash
      run: |
        sed -i 's/"version": "[0-9]*\.[0-9]*\.[0-9]*"/"version": "${{ env.TAG }}"/g' package.json

    - name: Get latest image commit sha
      if: env.EXITS_IMAGE != 'true' && inputs.DISABLE_CACHE != 'true'
      shell: bash
      run: |
        latest_sha=$(aws ecr describe-images --no-paginate --repository-name ${{ inputs.AWS_ECR_REPOSITORY }} --region ${{ inputs.AWS_REGION }} --query 'reverse(sort_by(imageDetails,& imagePushedAt))[:1].imageTags[0]' --output text)
        echo LATEST_TAG=$latest_sha >> $GITHUB_ENV

    - name: Docker build and push with cache inlined
      if: env.EXITS_IMAGE != 'true' && inputs.DISABLE_CACHE != 'true' && env.LATEST_TAG != 'None'
      shell: bash
      run: >
        docker buildx build
        --push -t ${{ env.ECR_URL }}:${{ env.TAG }}
        --cache-to=type=inline
        --cache-from=type=registry,ref=${{ env.ECR_URL }}:${{ env.LATEST_TAG }}
        .

    - name: Docker build and push no cache
      if: env.EXITS_IMAGE != 'true' && (inputs.DISABLE_CACHE == 'true' || env.LATEST_TAG == 'None')
      shell: bash
      run: >-
        docker buildx build
        --push -t ${{ env.ECR_URL }}:${{ env.TAG }}
        --cache-to=type=inline
        .

    - name: Prefix parameter overrides Cloud Formation
      shell: bash
      run: |
        HAVE_PARAMS=${{ contains(inputs.AWS_CLOUDFORMATION_PARAMS_OVERRIDE, '=') }}
        echo "PREFIX_OVERRIDE=$(if [ $HAVE_PARAMS == 'true' ]; then echo ','; else echo ''; fi)" >> $GITHUB_ENV

    - name: Capitalize environment
      id: CAPITALIZED_ENV
      uses: ASzc/change-string-case-action@v5
      with:
        string: ${{ inputs.ENVIRONMENT }}

    - name: Build cloudformation stack name
      shell: bash
      env:
        ENVIRONMENT: ${{ inputs.ENVIRONMENT }}
        STACK_NAME: ${{ inputs.AWS_CF_STACK_NAME }}
        CONCAT_ENV: ${{ inputs.CONCAT_ENV_CF_STACK_NAME }}
      run: >-
        echo "CF_STACK_NAME=$(if [ $CONCAT_ENV == true ]; then echo ${STACK_NAME}-${ENVIRONMENT}; else echo ${STACK_NAME}; fi)" >> $GITHUB_ENV

    - name: Upload CloudFormation template to S3 (if AWS_BUCKET_CLOUDFORMATION is defined)
      if: ${{ inputs.AWS_BUCKET_CLOUDFORMATION != '' }}
      run: |
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        DEST_PATH="s3://${{ inputs.AWS_BUCKET_CLOUDFORMATION }}/${{ env.CF_STACK_NAME }}/cloudformation-${TIMESTAMP}.yml"
        echo "Uploading CloudFormation template to $DEST_PATH"
        aws s3 cp ./cloudformation/cloudformation.yml $DEST_PATH
        echo "CF_TEMPLATE_PATH=$DEST_PATH" >> $GITHUB_ENV
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ inputs.AWS_REGION }}

    - name: Deploy to AWS CloudFormation
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      env:
        ENV_CAPITALIZED: ${{ steps.CAPITALIZED_ENV.outputs.capitalized }}
      with:
        name: ${{ env.CF_STACK_NAME }}
        template: ${{ inputs.AWS_BUCKET_CLOUDFORMATION != '' && env.CF_TEMPLATE_PATH || './cloudformation/cloudformation.yml' }}
        no-fail-on-empty-changeset: "1"
        capabilities: ${{ inputs.CAPABILITIES }}
        parameter-overrides: >-
          Environment=${{ inputs.ENVIRONMENT }},
          ParameterSuffix=${{ env.ENV_CAPITALIZED }},
          EnvAwsECRImage=${{ inputs.AWS_ECR_REPOSITORY }}:${{ env.TAG }}
          ${{ env.PREFIX_OVERRIDE }} ${{ inputs.AWS_CLOUDFORMATION_PARAMS_OVERRIDE }}

    - uses: aws-actions/configure-aws-credentials@v1-node16
      if: env.EXITS_IMAGE != 'true' && inputs.AWS_ACCESS_KEY_ID_BACKUP != '' && inputs.AWS_SECRET_ACCESS_KEY_BACKUP != '' && inputs.AWS_REGION_BACKUP != '' && inputs.AWS_BUCKET_BACKUP_STEPLIX != '' && inputs.STEPLIX_BACKUP_PATH != ''
      id: AWS_BACKUP
      with:
        aws-access-key-id: ${{ inputs.AWS_ACCESS_KEY_ID_BACKUP }}
        aws-secret-access-key: ${{ inputs.AWS_SECRET_ACCESS_KEY_BACKUP }}
        aws-region: ${{ inputs.AWS_REGION_BACKUP }}

    - name: Backup repository inside steplix backups
      if: env.EXITS_IMAGE != 'true' && inputs.AWS_ACCESS_KEY_ID_BACKUP != '' && inputs.AWS_SECRET_ACCESS_KEY_BACKUP != '' && inputs.AWS_REGION_BACKUP != '' && inputs.AWS_BUCKET_BACKUP_STEPLIX != '' && inputs.STEPLIX_BACKUP_PATH != ''
      shell: bash
      run: |
        tar --exclude='/tmp' -czf /tmp/backup.tar.gz .
        aws s3 cp /tmp/backup.tar.gz s3://${{ inputs.AWS_BUCKET_BACKUP_STEPLIX }}/${{ inputs.STEPLIX_BACKUP_PATH }}/${{ env.TAG }}.tar.gz
